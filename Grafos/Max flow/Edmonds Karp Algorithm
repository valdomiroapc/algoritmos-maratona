struct node
{
    int destiny;
    int cap;
    int re_idx;
    node(int dest,int c,int rc){
        destiny = dest;
        cap = c;
        re_idx = rc;
    }
};
struct EdmondsKarp
{
    vector< vector< node > > graph;
    int inf = 1000000000;
    EdmondsKarp(int n){
        vector<node> vazio;
        for(int i=0;i<n;i++){
            graph.pb(vazio);
        }
    }
    int send_flow(int s,int t,vector<pair<int,int> > &pai){
        for(int i=0;i<pai.size();i++)
            pai[i] = {-1,-1};
        pai[s].first = -2;
        queue< pair<int,int> > fila;
        fila.push({s,inf});
        while(!fila.empty()){
            int davez = fila.front().first;
            int flow = fila.front().second;
            fila.pop();
            for(int i = 0;i<graph[davez].size();i++){
                node edge = graph[davez][i];
                if(pai[edge.destiny].first == -1 and edge.cap){
                    pai[edge.destiny] = {davez,i};
                    int new_flow = min(flow,edge.cap);
                    if(edge.destiny == t){
                        return new_flow;
                    }
                    fila.push({edge.destiny,new_flow});
                }
            }
        }
        return 0;
    }
    int maxflow(int s,int t){
        vector<pair<int,int> > pai(graph.size()+1);
        int new_flow;
        int max_flow=0;
        while((new_flow = send_flow(s,t,pai))){
            max_flow+=new_flow;
            int cur = t;
            int prev;
            while(cur != s){
                prev = pai[cur].first;
                int pos_i = pai[cur].second;
                graph[prev][pos_i].cap-=new_flow;
                int re_idx = graph[prev][pos_i].re_idx;
                graph[cur][re_idx].cap+=new_flow;
                cur = prev;
            }
        }
        return max_flow;
    }
    void create_edge(int u,int v,int cap){
        graph[u].pb(node(v,cap,graph[v].size()));
        graph[v].pb(node(u,0,graph[u].size()-1));
    }
};
